@inherits LayoutComponentBase
@using Farma.FarmaciaApp.Theme
@using MudBlazor
@inject Farma.FarmaciaApp.Services.PharmacyAuthState AuthState
@inject NavigationManager Navigation
@implements IDisposable

<MudThemeProvider Theme="@FarmaMudTheme.Theme" />
<MudLayout>
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudAppBar Elevation="0" Color="Color.Surface" Class="appbar px-4">
        <MudGrid AlignItems="Center">
            <MudItem xs="4" Class="d-flex align-items-center">
                @if (AuthState.IsAuthenticated)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Menu"
                                   Color="Color.Primary"
                                   Edge="Edge.Start"
                                   OnClick="ToggleDrawer" />
                }
                <MudText Typo="Typo.h6" Class="ml-2">
                    RappiFarma &bull; Portal de Farmacias
                </MudText>
            </MudItem>

            <MudItem xs="4" Class="d-flex flex-column align-items-center">
                @if (AuthState.IsAuthenticated && AuthState.Current is { } profile)
                {
                    <MudText Typo="Typo.subtitle1" Class="mb-0">
                        @profile.Nombre
                    </MudText>
                    <MudText Typo="Typo.caption" Class="mt-0">
                        Radio de cobertura: @profile.RadioCoberturaKm:F1 km
                    </MudText>
                }
            </MudItem>

            <MudItem xs="4" Class="d-flex justify-end">
                @if (AuthState.IsAuthenticated)
                {
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Logout"
                               OnClick="Logout">
                        Cerrar sesión
                    </MudButton>
                }
            </MudItem>
        </MudGrid>
    </MudAppBar>


    @if (AuthState.IsAuthenticated)
    {
        <MudDrawer @bind-Open="_drawerOpen"
                   ClipMode="DrawerClipMode.Never"
                   Variant="DrawerVariant.Responsive"
                   Elevation="0"
                   Class="app-drawer">
            <NavMenu />
        </MudDrawer>
    }

    <MudMainContent Class="main-content">
        <MudContainer MaxWidth="MaxWidth.Large" Class="py-6 px-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private bool _drawerOpen = true;
    private MudThemeProvider? _themeProvider;
    private bool _isDarkMode;
    private IDisposable? _systemPreferenceSubscription;

    protected override void OnInitialized()
    {
        _drawerOpen = AuthState.IsAuthenticated;
        AuthState.OnChange += HandleAuthStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _themeProvider is not null)
        {
            _isDarkMode = await _themeProvider.GetSystemPreference();
            _systemPreferenceSubscription = _themeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            await InvokeAsync(StateHasChanged);
        }
    }

    private Task OnSystemPreferenceChanged(bool prefersDarkMode)
    {
        _isDarkMode = prefersDarkMode;
        return InvokeAsync(StateHasChanged);
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private void Logout()
    {
        AuthState.Logout();
        Navigation.NavigateTo("/login", replace: true);
    }

    private void HandleAuthStateChanged()
    {
        _drawerOpen = AuthState.IsAuthenticated;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthState.OnChange -= HandleAuthStateChanged;
        _systemPreferenceSubscription?.Dispose();
    }
}
